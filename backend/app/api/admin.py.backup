# backend/app/api/admin.py

from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from sqlalchemy import func
from uuid import UUID

from app.database import get_db
from app.models.user import User
from app.models.club import Club
from app.models.test_result import TestResult
from app.schemas.user import User as UserSchema
from app.dependencies import get_current_active_user

from datetime import datetime, timedelta
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import JWTError, jwt
from pydantic import BaseModel
from app.config import settings

router = APIRouter()

# Admin check dependency
def get_admin_user(
    current_user: User = Depends(get_current_active_user)
) -> User:
    # In production, this should check against a proper admin flag
    # For now, we'll use a specific email domain
    if not current_user.email.endswith("@nexpo.admin"):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Admin access required"
        )
    return current_user


@router.post("/clubs")
def create_club(
    club_id: str,
    club_name: str,
    db: Session = Depends(get_db),
    admin_user: User = Depends(get_admin_user)
):
    # Check if club already exists
    existing_club = db.query(Club).filter(Club.club_id == club_id).first()
    if existing_club:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Club ID already exists"
        )
    
    # Create new club
    club = Club(club_id=club_id, club_name=club_name)
    db.add(club)
    db.commit()
    db.refresh(club)
    
    return {
        "club_id": club.club_id,
        "club_name": club.club_name,
        "created_date": club.created_date
    }


@router.get("/clubs")
def list_clubs(
    db: Session = Depends(get_db),
    admin_user: User = Depends(get_admin_user)
):
    clubs = db.query(Club).all()
    return [
        {
            "club_id": club.club_id,
            "club_name": club.club_name,
            "created_date": club.created_date,
            "user_count": len(club.users)
        }
        for club in clubs
    ]


@router.delete("/clubs/{club_id}")
def delete_club(
    club_id: str,
    db: Session = Depends(get_db),
    admin_user: User = Depends(get_admin_user)
):
    club = db.query(Club).filter(Club.club_id == club_id).first()
    if not club:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Club not found"
        )
    
    db.delete(club)
    db.commit()
    
    return {"message": "Club deleted successfully"}


@router.get("/users")
def list_all_users(
    limit: int = 100,
    offset: int = 0,
    db: Session = Depends(get_db)
):
    users = db.query(User).offset(offset).limit(limit).all()
    total = db.query(User).count()
    
    return {
        "users": users,
        "total_count": total
    }


@router.put("/users/{user_id}/head-coach")
def toggle_head_coach(
    user_id: UUID,
    is_head_coach: bool,
    db: Session = Depends(get_db),
    admin_user: User = Depends(get_admin_user)
):
    user = db.query(User).filter(User.user_id == user_id).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    
    if user.role != "coach":
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Only coaches can be made head coaches"
        )
    
    user.head_coach_function = is_head_coach
    db.commit()
    
    return {"message": f"Head coach status {'granted' if is_head_coach else 'revoked'} successfully"}


@router.put("/users/{user_id}/parent-function")
def toggle_parent_function(
    user_id: UUID,
    has_parent_function: bool,
    db: Session = Depends(get_db),
    admin_user: User = Depends(get_admin_user)
):
    user = db.query(User).filter(User.user_id == user_id).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    
    if user.role not in ["father", "mother"]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Only parents can have parent function"
        )
    
    user.parent_function = has_parent_function
    db.commit()
    
    return {"message": f"Parent function {'granted' if has_parent_function else 'revoked'} successfully"}


@router.delete("/test-results/{result_id}")
def delete_test_result(
    result_id: UUID,
    db: Session = Depends(get_db),
    admin_user: User = Depends(get_admin_user)
):
    result = db.query(TestResult).filter(TestResult.result_id == result_id).first()
    if not result:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Test result not found"
        )
    
    db.delete(result)
    db.commit()
    
    return {"message": "Test result deleted successfully"}


@router.get("/users/statistics/summary")
def get_user_statistics(
    club_id: Optional[str] = None,
    db: Session = Depends(get_db)
):
    """ユーザー統計情報を取得"""
    query = db.query(User)
    
    if club_id:
        query = query.filter(User.club_id == club_id)
    
    total_users = query.count()
    
    # 役割別統計
    role_stats = {}
    for role in ['player', 'father', 'mother', 'coach']:
        count = query.filter(User.role == role).count()
        role_stats[role] = count
    
    # クラブ別統計
    club_stats = db.query(
        User.club_id,
        func.count(User.user_id).label('user_count')
    ).group_by(User.club_id).all()
    
    return {
        "total_users": total_users,
        "role_statistics": role_stats,
        "club_statistics": [{"club_id": stat.club_id, "user_count": stat.user_count} for stat in club_stats]
    }


@router.put("/users/{user_id}/role")
def update_user_role(
    user_id: UUID,
    role_data: dict,
    db: Session = Depends(get_db)
):
    """ユーザーの役割を更新"""
    user = db.query(User).filter(User.user_id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    user.role = role_data.get("new_role")
    db.commit()
    db.refresh(user)
    return user


@router.put("/users/{user_id}/activate")
def activate_user(
    user_id: UUID,
    db: Session = Depends(get_db)
):
    """ユーザーを有効化（is_activeフィールドがないため、コメント機能として実装）"""
    user = db.query(User).filter(User.user_id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # is_activeフィールドがないため、現在は何もしない
    # 将来的にis_activeフィールドを追加する場合はここで設定
    return {"message": "User activation feature not implemented (no is_active field)"}


@router.put("/users/{user_id}/deactivate")
def deactivate_user(
    user_id: UUID,
    db: Session = Depends(get_db)
):
    """ユーザーを無効化（is_activeフィールドがないため、コメント機能として実装）"""
    user = db.query(User).filter(User.user_id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # is_activeフィールドがないため、現在は何もしない
    return {"message": "User deactivation feature not implemented (no is_active field)"}


@router.delete("/users/{user_id}")
def delete_user(
    user_id: UUID,
    db: Session = Depends(get_db)
):
    """ユーザーを削除"""
    user = db.query(User).filter(User.user_id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # 関連するテスト結果も削除（CASCADE設定による）
    db.delete(user)
    db.commit()
    return {"message": "User deleted successfully"}