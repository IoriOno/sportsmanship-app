// file: frontend/src/pages/test/TestResultPage.tsx
import React, { useState, useEffect } from 'react';
import { useParams, useLocation, useNavigate } from 'react-router-dom';
import { ArrowLeftIcon, ShareIcon, DocumentArrowDownIcon, InformationCircleIcon } from '@heroicons/react/24/outline';
import Button from '../../components/common/Button';
import ResultHeader from '../../components/result/ResultHeader';
import SportsmanshipChart from '../../components/result/SportsmanshipChart';
import { SportsmanshipScoreCard, AthleteMinScoreCard, SelfEsteemScoreCard } from '../../components/result/CategoryScoreCard';
import InsightPanel from '../../components/result/InsightPanel';
import { useAuthStore } from '../../store/authStore';
import { User, UserRole } from '../../types/auth';

// 標準化されたTestResult型定義
interface TestResult {
  result_id: string;
  user_id: string;
  test_date: string;
  
  // 自己肯定感関連
  self_determination: number;
  self_acceptance: number;
  self_worth: number;
  self_efficacy: number;
  
  // アスリートマインド（標準化されたフィールド名）
  introspection: number;   // 内省
  self_control: number;    // 克己
  devotion: number;        // 献身（旧: dedication）
  intuition: number;       // 直感
  sensitivity: number;     // 繊細
  steadiness: number;      // 堅実
  comparison: number;      // 比較
  result: number;          // 結果（旧: result_focus）
  assertion: number;       // 主張
  commitment: number;      // こだわり（旧: thoroughness）
  
  // スポーツマンシップ
  courage: number;
  resilience: number;
  cooperation: number;
  natural_acceptance: number;
  non_rationality: number;
  
  // 分析結果
  self_esteem_total: number;
  self_esteem_analysis: string;
  self_esteem_improvements: string[];
  athlete_type: string;
  athlete_type_description: string;
  athlete_type_percentages: Record<string, number>;
  strengths: string[];
  weaknesses: string[];
  sportsmanship_balance: string;
}

const TestResultPage = () => {
  const { resultId } = useParams();
  const location = useLocation();
  const navigate = useNavigate();
  const { login } = useAuthStore();
  
  const [result, setResult] = useState<TestResult | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // 説明表示のトグル状態
  const [showSelfEsteemInfo, setShowSelfEsteemInfo] = useState(false);
  const [showSelfAcceptanceInfo, setShowSelfAcceptanceInfo] = useState(false);
  const [showSelfWorthInfo, setShowSelfWorthInfo] = useState(false);
  const [showSelfDeterminationInfo, setShowSelfDeterminationInfo] = useState(false);
  const [showSelfEfficacyInfo, setShowSelfEfficacyInfo] = useState(false);

  // 新しく提出されたテスト結果をlocation.stateから取得
  const newTestResult = location.state?.testResult;
  const isNewResult = location.state?.isNewResult;

  useEffect(() => {
    console.log('TestResultPage: ユーザー情報確認開始');
    const userStr = localStorage.getItem('user');
    if (userStr) {
      try {
        const userData = JSON.parse(userStr);
        setUser(userData);
        console.log('TestResultPage: ユーザー情報取得成功:', userData);
      } catch (err) {
        console.error('TestResultPage: ユーザー情報の取得に失敗:', err);
        // サンプルユーザーでフォールバック
        const sampleUser: User = {
          user_id: '123',
          name: '田中太郎',
          role: UserRole.PLAYER,
          email: 'tanaka@example.com',
          club_id: 'sample-club',
          parent_function: false,
          head_coach_function: false,
          created_date: new Date().toISOString(),
          updated_date: new Date().toISOString()
        };
        setUser(sampleUser);
        localStorage.setItem('user', JSON.stringify(sampleUser));
        // 認証状態を更新
        login({
          user: sampleUser,
          access_token: 'sample-token',
          token_type: 'bearer'
        });
        console.log('TestResultPage: サンプルユーザーでフォールバック');
      }
    } else {
      console.log('TestResultPage: ローカルストレージにユーザー情報なし、サンプルユーザーを使用');
      // サンプルユーザーでフォールバック
      const sampleUser: User = {
        user_id: '123',
        name: '田中太郎',
        role: UserRole.PLAYER,
        email: 'tanaka@example.com',
        club_id: 'sample-club',
        parent_function: false,
        head_coach_function: false,
        created_date: new Date().toISOString(),
        updated_date: new Date().toISOString()
      };
      setUser(sampleUser);
      localStorage.setItem('user', JSON.stringify(sampleUser));
      // 認証状態を更新
      login({
        user: sampleUser,
        access_token: 'sample-token',
        token_type: 'bearer'
      });
    }

    // 新しい結果がある場合はそれを使用
    if (newTestResult && isNewResult) {
      setResult(newTestResult);
      setLoading(false);
      return;
    }

    // resultIdが"latest"の場合やAPIから取得が必要な場合
    const fetchResult = async () => {
      try {
        setLoading(true);
        
        // TODO: 実際のAPIエンドポイントからテスト結果を取得
        // const response = await apiService.get<TestResult>(`/tests/${resultId}`);
        // setResult(response);

        // サンプルデータ（標準化されたフィールド名使用）
        const sampleResult: TestResult = {
          result_id: resultId || 'sample-id',
          user_id: user?.user_id || 'sample-user',
          test_date: new Date().toISOString(),
          
          // 自己肯定感関連
          self_determination: 37.5,
          self_acceptance: 34,
          self_worth: 36,
          self_efficacy: 40,
          
          // アスリートマインド（標準化された名前）
          introspection: 78,
          self_control: 82,
          devotion: 85,        // 旧: dedication
          intuition: 70,
          sensitivity: 65,
          steadiness: 88,
          comparison: 75,
          result: 90,          // 旧: result_focus
          assertion: 77,
          commitment: 83,      // 旧: thoroughness
          
          // スポーツマンシップ
          courage: 85,
          resilience: 78,
          cooperation: 72,
          natural_acceptance: 68,
          non_rationality: 45,
          
          // 分析結果
          self_esteem_total: 147.5,
          self_esteem_analysis: "あなたの自己肯定感は良好な状態です。特に自己効力感が高く、目標達成への自信を持っています。自己受容の面でさらなる向上の余地があります。",
          self_esteem_improvements: [
            "定期的な自己振り返りの時間を設けることをお勧めします",
            "小さな成功体験を積み重ねていきましょう",
            "他者との比較より自分自身の成長に焦点を当てましょう",
            "失敗を学習の機会として捉える習慣を身につけましょう"
          ],
          athlete_type: "アタッカー",
          athlete_type_description: "攻撃的で結果を追求し、状況を切り開く力を持つタイプ。目標に向かって自ら動き、最前線で戦う姿勢が特徴です。",
          athlete_type_percentages: {
            "ストライカー": 65,
            "アタッカー": 78,
            "ゲームメイカー": 45,
            "アンカー": 52,
            "ディフェンダー": 38
          },
          strengths: ["結果志向", "リーダーシップ", "目標設定", "競争心", "実行力"],
          weaknesses: ["完璧主義", "プレッシャー感受性", "協調性", "柔軟性", "感情制御"],
          sportsmanship_balance: "全体的にバランスが取れていますが、非合理性の分野で成長の余地があります。論理的思考が強い一方で、直感や感情的な判断も重要にしてみましょう。"
        };

        setTimeout(() => {
          setResult(sampleResult);
          setLoading(false);
        }, 1000); // ローディング効果のための遅延

      } catch (err: any) {
        console.error('テスト結果の取得に失敗:', err);
        setError('テスト結果の取得に失敗しました。');
        setLoading(false);
      }
    };

    fetchResult();
  }, [resultId, newTestResult, isNewResult, navigate]);

  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: 'スポーツマンシップテスト結果',
        text: `私のアスリートタイプは「${result?.athlete_type}」でした！`,
        url: window.location.href,
      });
    } else {
      // フォールバック: URLをクリップボードにコピー
      navigator.clipboard.writeText(window.location.href);
      alert('結果のURLをコピーしました！');
    }
  };

  const handleExportPDF = () => {
    // TODO: PDF出力機能の実装
    alert('PDF出力機能は近日実装予定です');
  };

  const handleBackToDashboard = () => {
    navigate('/dashboard');
  };

  // 自己肯定感の合計を計算（自己効力感は別途表示）
  const selfEsteemTotal = result ? (result.self_acceptance + result.self_worth + result.self_determination) : 0;

  // 自己肯定感の分析文を生成
  const generateSelfEsteemAnalysis = () => {
    if (!result) return '';
    
    const acceptance = result.self_acceptance;
    const worth = result.self_worth;
    const determination = result.self_determination;
    const efficacy = result.self_efficacy;
    
    let analysis = `あなたの自己肯定感は${selfEsteemTotal}/150点です。`;
    
    if (acceptance >= 40) {
      analysis += `自己受容感が高く、自分自身をありのまま受け入れる力が備わっています。`;
    } else if (acceptance >= 30) {
      analysis += `自己受容感は平均的で、時に自分を受け入れることに葛藤を感じることがあるかもしれません。`;
    } else {
      analysis += `自己受容感に課題があり、自分を否定的に捉えがちな傾向があります。`;
    }
    
    if (worth >= 40) {
      analysis += `また、自己有用感も高く、自分の存在価値を強く感じています。`;
    } else if (worth >= 30) {
      analysis += `自己有用感は標準的で、状況により自信が揺らぐこともあるでしょう。`;
    } else {
      analysis += `自己有用感を高める余地があり、自分の価値を見出すことに苦労しているかもしれません。`;
    }
    
    if (determination >= 40) {
      analysis += `自己決定感も優れており、主体的に物事を決定し行動できています。`;
    } else if (determination >= 30) {
      analysis += `自己決定感は適度で、時に他者の意見に流されることもあるでしょう。`;
    } else {
      analysis += `自己決定感を育てることで、より主体的な行動が取れるようになるでしょう。`;
    }
    
    // アスリートマインドの要素も反映
    if (result.introspection >= 80) {
      analysis += `内省力が高いことも、自己理解を深める強みとなっています。`;
    }
    
    if (result.self_control >= 80) {
      analysis += `優れた克己心は、目標に向かって努力を継続する原動力になっています。`;
    }
    
    return analysis;
  };

  // 自己肯定感改善のための意識すべきこと
  const generateSelfEsteemImprovements = () => {
    if (!result) return [];
    
    const improvements = [];
    
    if (result.self_acceptance < 35) {
      improvements.push('毎日、自分の良かった点を3つ書き出す習慣をつける');
      improvements.push('失敗を成長の機会として前向きに捉える練習をする');
    }
    
    if (result.self_worth < 35) {
      improvements.push('小さな成功体験を意識的に積み重ね、記録する');
      improvements.push('他者への貢献を通じて自分の価値を実感する機会を増やす');
    }
    
    if (result.self_determination < 35) {
      improvements.push('日々の小さな選択から自分で決める習慣を身につける');
      improvements.push('自分の意見を言葉にして表現する練習をする');
    }
    
    if (improvements.length < 5) {
      improvements.push('定期的に自己振り返りの時間を設け、成長を確認する');
      improvements.push('他者と比較せず、過去の自分と比較して成長を実感する');
      improvements.push('感謝の気持ちを日記に書き、ポジティブな視点を養う');
    }
    
    return improvements.slice(0, 5);
  };

  // 自己効力感の分析文を生成
  const generateSelfEfficacyAnalysis = () => {
    if (!result) return '';
    
    const efficacy = result.self_efficacy;
    let analysis = `あなたの自己効力感は${efficacy}/50点です。`;
    
    if (efficacy >= 40) {
      analysis += `目標達成への自信が非常に高く、困難な課題にも積極的に取り組める状態です。`;
    } else if (efficacy >= 30) {
      analysis += `適度な自信を持っており、多くの課題に対して前向きに取り組めています。`;
    } else {
      analysis += `自己効力感を高めることで、より大きな目標にチャレンジできるようになるでしょう。`;
    }
    
    // 他の要素との関連
    if (result.result >= 80) {
      analysis += `結果志向の強さが、目標達成への推進力となっています。`;
    }
    
    if (result.commitment >= 80) {
      analysis += `強いこだわりは、質の高いパフォーマンスを生み出す源泉です。`;
    }
    
    if (result.resilience >= 75) {
      analysis += `レジリエンスの高さは、挫折を乗り越える力として機能しています。`;
    }
    
    // 改善点の示唆
    if (efficacy < 35) {
      analysis += `段階的な目標設定により、成功体験を積み重ねることが重要です。過去の成功体験を振り返り、自信の源を再確認しましょう。`;
    } else {
      analysis += `現在の自信を維持しながら、新たな挑戦を通じてさらなる成長を目指しましょう。`;
    }
    
    return analysis;
  };

  // 自己効力感改善のための意識すべきこと
  const generateSelfEfficacyImprovements = () => {
    if (!result) return [];
    
    const improvements = [];
    const efficacy = result.self_efficacy;
    
    if (efficacy < 40) {
      improvements.push('達成可能な小さな目標を設定し、成功体験を積み重ねる');
      improvements.push('成功した他者のモデリングを通じて、自分にもできると信じる');
      improvements.push('ポジティブな自己対話を心がけ、ネガティブな思考を変換する');
    }
    
    improvements.push('目標を具体的に可視化し、達成までのプロセスを明確にする');
    improvements.push('失敗を学習機会と捉え、次への改善点を具体的に見つける');
    improvements.push('自分の強みを活かせる場面を意識的に増やす');
    improvements.push('メンターやコーチからのフィードバックを積極的に求める');
    improvements.push('日々の小さな進歩を記録し、成長を実感する習慣をつける');
    
    return improvements.slice(0, 5);
  };

  // スポーツマンシップ総合分析
  const generateSportsmanshipAnalysis = () => {
    if (!result) return '';
    
    const selfEsteemScore = selfEsteemTotal;
    const efficacyScore = result.self_efficacy;
    
    let analysis = `あなたのスポーツマンシップは、自己肯定感（${selfEsteemScore}/150）と自己効力感（${efficacyScore}/50）のバランスから見ると、`;
    
    if (selfEsteemScore >= 120 && efficacyScore >= 40) {
      analysis += `非常に優れた状態にあります。自分を肯定的に捉え、目標達成への確信も強く、理想的なメンタル状態です。`;
    } else if (selfEsteemScore >= 90 && efficacyScore >= 30) {
      analysis += `良好な状態です。基本的な自己肯定感と実行力のバランスが取れています。`;
    } else {
      analysis += `成長の余地があります。自己理解を深め、段階的な成功体験を重ねることが重要です。`;
    }
    
    // スポーツマンシップの5要素との関連
    if (result.courage >= 80 && result.resilience >= 80) {
      analysis += `勇気とレジリエンスの高さは、困難な状況でも前進する力となっています。`;
    }
    
    if (result.cooperation >= 75) {
      analysis += `協調性の高さは、チーム内での信頼関係構築に貢献しています。`;
    }
    
    // バランスの観点
    const gap = Math.abs((selfEsteemScore / 3) - efficacyScore);
    if (gap > 15) {
      analysis += `自己肯定感と自己効力感のバランスに差があります。両者を調和させることで、より安定したパフォーマンスが期待できます。`;
    } else {
      analysis += `両者のバランスが良く、安定したメンタル基盤が形成されています。`;
    }
    
    analysis += `今後は、弱い部分を補強しながら、強みをさらに伸ばすことで、真のスポーツマンシップを体現できるでしょう。`;
    
    return analysis;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-4 border-indigo-500 border-t-transparent mx-auto mb-4"></div>
          <p className="text-lg text-gray-600">結果を分析中...</p>
          <p className="text-sm text-gray-500 mt-2">素晴らしい結果をお待ちください</p>
        </div>
      </div>
    );
  }

  if (error || !result || !user) {
    return (
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="text-center">
          <div className="text-red-600 text-lg mb-4">{error || 'データの読み込みに失敗しました'}</div>
          <Button onClick={handleBackToDashboard}>
            ダッシュボードに戻る
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Navigation */}
        <div className="mb-8">
          <Button
            variant="secondary"
            onClick={handleBackToDashboard}
            className="inline-flex items-center"
          >
            <ArrowLeftIcon className="w-4 h-4 mr-2" />
            ダッシュボードに戻る
          </Button>
        </div>

        <div className="space-y-8">
          {/* Result Header */}
          <ResultHeader
            userName={user.name}
            userRole={user.role}
            testDate={result.test_date}
            athleteType={result.athlete_type}
            onExportPDF={handleExportPDF}
            onShare={handleShare}
          />

          {/* New Result Celebration */}
          {isNewResult && (
            <div className="bg-gradient-to-r from-green-100 to-emerald-100 border border-green-200 rounded-2xl p-6 text-center shadow-lg">
              <div className="text-green-800">
                <h3 className="text-xl font-bold mb-2">🎉 テスト完了おめでとうございます！</h3>
                <p className="text-green-700">
                  あなたの結果を詳しく分析しました。下記の内容をじっくりとご確認ください。
                </p>
              </div>
            </div>
          )}

          {/* 自己肯定感・自己効力感セクション */}
          <div className="bg-white rounded-2xl shadow-lg p-8 space-y-8">
            {/* 自己肯定感 */}
            <div>
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-2xl font-bold text-gray-800">自己肯定感</h3>
                <div className="text-3xl font-bold text-indigo-600">{selfEsteemTotal}/150</div>
              </div>
              
              <button
                onClick={() => setShowSelfEsteemInfo(!showSelfEsteemInfo)}
                className="flex items-center text-sm text-indigo-600 hover:text-indigo-800 mb-4"
              >
                <InformationCircleIcon className="w-5 h-5 mr-1" />
                自己肯定感とは？
              </button>
              
              {showSelfEsteemInfo && (
                <div className="bg-indigo-50 rounded-lg p-4 mb-4 text-sm text-gray-700">
                  自己肯定感とは、自分自身を価値ある存在として肯定的に捉える感覚です。
                  自己受容感、自己有用感、自己決定感の3つの要素から構成されます。
                </div>
              )}
              
              {/* 3つの要素 */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div className="bg-gray-50 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium text-gray-700">自己受容感</span>
                    <span className="text-xl font-bold text-gray-800">{result.self_acceptance}/50</span>
                  </div>
                  <button
                    onClick={() => setShowSelfAcceptanceInfo(!showSelfAcceptanceInfo)}
                    className="text-xs text-indigo-600 hover:text-indigo-800"
                  >
                    詳細を見る
                  </button>
                  {showSelfAcceptanceInfo && (
                    <div className="mt-2 text-xs text-gray-600">
                      ありのままの自分を受け入れる力。失敗や欠点も含めて自分を認められる感覚です。
                    </div>
                  )}
                </div>
                
                <div className="bg-gray-50 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium text-gray-700">自己有用感</span>
                    <span className="text-xl font-bold text-gray-800">{result.self_worth}/50</span>
                  </div>
                  <button
                    onClick={() => setShowSelfWorthInfo(!showSelfWorthInfo)}
                    className="text-xs text-indigo-600 hover:text-indigo-800"
                  >
                    詳細を見る
                  </button>
                  {showSelfWorthInfo && (
                    <div className="mt-2 text-xs text-gray-600">
                      自分が誰かの役に立っている、必要とされているという感覚。社会的な存在価値を感じる力です。
                    </div>
                  )}
                </div>
                
                <div className="bg-gray-50 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium text-gray-700">自己決定感</span>
                    <span className="text-xl font-bold text-gray-800">{result.self_determination}/50</span>
                  </div>
                  <button
                    onClick={() => setShowSelfDeterminationInfo(!showSelfDeterminationInfo)}
                    className="text-xs text-indigo-600 hover:text-indigo-800"
                  >
                    詳細を見る
                  </button>
                  {showSelfDeterminationInfo && (
                    <div className="mt-2 text-xs text-gray-600">
                      自分の意志で物事を決定し、行動できるという感覚。主体性や自律性を持つ力です。
                    </div>
                  )}
                </div>
              </div>
              
              {/* あなたの自己肯定感の説明 */}
              <div className="bg-blue-50 rounded-lg p-6">
                <h4 className="font-bold text-gray-800 mb-3">あなたの自己肯定感の分析</h4>
                <p className="text-gray-700 mb-4">{generateSelfEsteemAnalysis()}</p>
                
                <h5 className="font-semibold text-gray-800 mb-2">日頃意識すべきこと：</h5>
                <ul className="list-disc list-inside space-y-1 text-gray-700">
                  {generateSelfEsteemImprovements().map((improvement, index) => (
                    <li key={index}>{improvement}</li>
                  ))}
                </ul>
              </div>
            </div>
            
            {/* 自己効力感 */}
            <div>
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-2xl font-bold text-gray-800">自己効力感</h3>
                <div className="text-3xl font-bold text-green-600">{result.self_efficacy}/50</div>
              </div>
              
              <button
                onClick={() => setShowSelfEfficacyInfo(!showSelfEfficacyInfo)}
                className="flex items-center text-sm text-green-600 hover:text-green-800 mb-4"
              >
                <InformationCircleIcon className="w-5 h-5 mr-1" />
                自己効力感とは？
              </button>
              
              {showSelfEfficacyInfo && (
                <div className="bg-green-50 rounded-lg p-4 mb-4 text-sm text-gray-700">
                  自己効力感とは、目標を達成するために必要な行動を自分は実行できるという信念や自信のことです。
                  課題に対して「自分ならできる」と思える感覚で、パフォーマンス向上の重要な要素です。
                </div>
              )}
              
              {/* あなたの自己効力感の説明 */}
              <div className="bg-green-50 rounded-lg p-6">
                <h4 className="font-bold text-gray-800 mb-3">あなたの自己効力感の分析</h4>
                <p className="text-gray-700 mb-4">{generateSelfEfficacyAnalysis()}</p>
                
                <h5 className="font-semibold text-gray-800 mb-2">日頃意識すべきこと：</h5>
                <ul className="list-disc list-inside space-y-1 text-gray-700">
                  {generateSelfEfficacyImprovements().map((improvement, index) => (
                    <li key={index}>{improvement}</li>
                  ))}
                </ul>
              </div>
            </div>
            
            {/* スポーツマンシップ総合分析 */}
            <div className="bg-gradient-to-r from-indigo-50 to-green-50 rounded-lg p-6">
              <h4 className="font-bold text-gray-800 mb-3">スポーツマンシップ総合分析</h4>
              <p className="text-gray-700">{generateSportsmanshipAnalysis()}</p>
            </div>
          </div>

          {/* Charts Section */}
          <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
            {/* Sportsmanship Radar Chart */}
            <div className="xl:col-span-2">
              <SportsmanshipChart
                scores={{
                  courage: result.courage,
                  resilience: result.resilience,
                  cooperation: result.cooperation,
                  natural_acceptance: result.natural_acceptance,
                  non_rationality: result.non_rationality
                }}
                maxScore={100}
              />
            </div>
          </div>

          {/* Score Cards */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <SportsmanshipScoreCard scores={{
              courage: result.courage,
              resilience: result.resilience,
              cooperation: result.cooperation,
              natural_acceptance: result.natural_acceptance,
              non_rationality: result.non_rationality
            }} />
            
            {/* アスリートマインドの全フィールドを渡す */}
            <AthleteMinScoreCard scores={{
              commitment: result.commitment,        // こだわり
              result: result.result,               // 結果
              steadiness: result.steadiness,       // 堅実
              devotion: result.devotion,           // 献身
              self_control: result.self_control,   // 克己
              assertion: result.assertion,         // 主張
              sensitivity: result.sensitivity,     // 繊細
              intuition: result.intuition,         // 直感
              introspection: result.introspection, // 内省
              comparison: result.comparison        // 比較
            }} />
            
            {/* 自己肯定感の全フィールドを渡す */}
            <SelfEsteemScoreCard scores={{
              self_efficacy: result.self_efficacy,
              self_determination: result.self_determination,
              self_acceptance: result.self_acceptance,
              self_worth: result.self_worth
            }} />
          </div>

          {/* Insight Panel */}
          <InsightPanel
            athleteType={result.athlete_type}
            athleteTypeDescription={result.athlete_type_description}
            athleteTypePercentages={result.athlete_type_percentages}
            strengths={result.strengths}
            weaknesses={result.weaknesses}
            selfEsteemAnalysis={result.self_esteem_analysis}
            selfEsteemImprovements={result.self_esteem_improvements}
            sportsmanshipBalance={result.sportsmanship_balance}
          />

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center pt-8">
            <Button
              onClick={handleExportPDF}
              variant="secondary"
              className="inline-flex items-center"
            >
              <DocumentArrowDownIcon className="w-5 h-5 mr-2" />
              PDFで保存
            </Button>
            
            <Button
              onClick={handleShare}
              className="inline-flex items-center"
            >
              <ShareIcon className="w-5 h-5 mr-2" />
              結果をシェア
            </Button>
            
            <Button
              onClick={() => navigate('/test')}
              variant="secondary"
            >
              再テストを受ける
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TestResultPage;